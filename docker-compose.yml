# version: '3.8'

services:
  # MongoDB
  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - '27017:27017'
    volumes:
      - mongodbdata:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  #inventory-db:
  inventory-db:
    image: postgres:13
    environment:
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_pass
      POSTGRES_DB: inventory_service_db
    ports:
      - '5433:5432'
    volumes:
      - inventory_db_data:/var/lib/postgresql/data
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -U inventory_user -d inventory_service_db']
      interval: 5s
      timeout: 5s
      retries: 5

  #auth-db:
  auth-db:
    image: postgres:13
    environment:
      POSTGRES_USER: authdb_user
      POSTGRES_PASSWORD: authdb_pass
      POSTGRES_DB: auth_service_db
    ports:
      - '5437:5432'
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -U authdb_user -d auth_service_db']
      interval: 5s
      timeout: 5s
      retries: 5

  #user-db:
  user-db:
    image: postgres:13
    environment:
      POSTGRES_USER: userdb_user
      POSTGRES_PASSWORD: userdb_pass
      POSTGRES_DB: user_service_db
    ports:
      - '5434:5432'
    volumes:
      - user_db_data:/var/lib/postgresql/data
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -U userdb_user -d user_service_db']
      interval: 5s
      timeout: 5s
      retries: 5

  #order-db:
  order-db:
    image: postgres:13
    environment:
      POSTGRES_USER: orderdb_user
      POSTGRES_PASSWORD: orderdb_pass
      POSTGRES_DB: order_service_db
    ports:
      - '5435:5432'
    volumes:
      - order_db_data:/var/lib/postgresql/data
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -U orderdb_user -d order_service_db']
      interval: 5s
      timeout: 5s
      retries: 5

  #notification-db:
  notification-db:
    image: postgres:13
    environment:
      POSTGRES_USER: notificationdb_user
      POSTGRES_PASSWORD: notificationdb_pass
      POSTGRES_DB: notification_service_db
    ports:
      - '5436:5432'
    volumes:
      - notification_db_data:/var/lib/postgresql/data
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -U notificationdb_user -d notification_service_db']
      interval: 5s
      timeout: 5s
      retries: 5

  #pgadmin:
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - '5050:80'
    depends_on:
      - inventory-db

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: apps/backend/services/auth-service/Dockerfile
    container_name: auth-service
    ports:
      - '3001:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://userdb_user:userdb_pass@localhost:5434/user_service_db?schema=public
    depends_on:
      - user-db
    volumes:
      - /app/node_modules

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: apps/backend/services/product-service/Dockerfile
    container_name: product-service
    ports:
      - '3002:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MONGO_URI=mongodb://mongodb:27017/product_service_db
    depends_on:
      - mongodb
    volumes:
      - /app/node_modules

  # Product Service
  inventory-service:
    build:
      context: .
      dockerfile: apps/backend/services/inventory-service/Dockerfile
    container_name: inventory-service
    ports:
      - '3003:3000'
    environment:
      - NODE_ENV=development
    depends_on:
      - inventory-db
    volumes:
      - /app/node_modules

  user-service:
    build:
      context: .
      dockerfile: apps/backend/services/user-service/Dockerfile
    container_name: user-service
    ports:
      - '3004:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://userdb_user:userdb_pass@localhost:5434/user_service_db?schema=public
    depends_on:
      - user-db
    volumes:
      - /app/node_modules
  order-service:
    build:
      context: .
      dockerfile: apps/backend/services/order-service/Dockerfile
    container_name: order-service
    ports:
      - '3005:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://orderdb_user:orderdb_pass@localhost:5435/order_service_db?schema=public
    depends_on:
      - order-db
    volumes:
      - /app/node_modules
  
  notification-service:
    build:
      context: .
      dockerfile: apps/backend/services/notification-service/Dockerfile
    container_name: notification-service
    ports:
      - '3006:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://notificationdb_user:notificationdb_pass@localhost:5436/notification_service_db?schema=public
    depends_on:
      - notification-db
    volumes:
      - /app/node_modules
  # Add other services similarly

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: apps/ecommerce/Dockerfile
    container_name: ecommerce
    ports:
      - '3000:80'
    # depends_on:
    # - auth-service
    # - product-service
    # Add other dependencies as needed
  api-gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    ports:
      - "80:80"
    env_file:
      - gateway/.env
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    # depends_on:
    #   - frontend
    #   - product-service
    #   - inventory-service
  
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672" # Management UI
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  mongodbdata:
  inventory_db_data:
  user_db_data:
  order_db_data:
  notification_db_data:
  auth_db_data: